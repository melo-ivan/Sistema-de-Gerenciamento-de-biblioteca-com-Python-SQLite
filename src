import sqlite3
import tkinter as tk
from tkinter import messagebox, ttk


# Função para conectar ao banco de dados
def connect():
    conn = sqlite3.connect('biblioteca.db')
    return conn

# Função para criar as tabelas necessárias no banco de dados
def create_tables():
    conn = connect()
    
    # Criar tabela de livros
    conn.execute('''CREATE TABLE IF NOT EXISTS livros (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        titulo TEXT,
                        autor TEXT,
                        editora TEXT,
                        ano_publicacao INTEGER,
                        isbn TEXT)''')

    # Criar tabela de usuários
    conn.execute('''CREATE TABLE IF NOT EXISTS usuarios (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        nome TEXT,
                        sobrenome TEXT,
                        endereco TEXT,
                        email TEXT,
                        telefone TEXT)''')

    # Criar tabela de empréstimos
    conn.execute('''CREATE TABLE IF NOT EXISTS emprestimos (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        id_livro INTEGER,
                        id_usuario INTEGER,
                        data_emprestimo TEXT,
                        data_devolucao TEXT,
                        FOREIGN KEY(id_livro) REFERENCES livros(id),
                        FOREIGN KEY(id_usuario) REFERENCES usuarios(id))''')
    
    conn.commit()
    conn.close()


# Função para inserir um novo livro
def insert_book(titulo, autor, editora, ano_publicacao, isbn):
    conn = connect()
    conn.execute("INSERT INTO livros (titulo, autor, editora, ano_publicacao, isbn) VALUES (?, ?, ?, ?, ?)", 
                 (titulo, autor, editora, ano_publicacao, isbn))
    conn.commit()
    conn.close()


# Função para inserir um novo usuário
def insert_user(nome, sobrenome, endereco, email, telefone):
    conn = connect()
    conn.execute("INSERT INTO usuarios (nome, sobrenome, endereco, email, telefone) VALUES (?, ?, ?, ?, ?)", 
                 (nome, sobrenome, endereco, email, telefone))
    conn.commit()
    conn.close()


# Função para realizar um novo empréstimo
def insert_loan(id_livro, id_usuario, data_emprestimo):
    conn = connect()
    conn.execute("INSERT INTO emprestimos (id_livro, id_usuario, data_emprestimo) VALUES (?, ?, ?)", 
                 (id_livro, id_usuario, data_emprestimo))
    conn.commit()
    conn.close()


# Função para atualizar a data de devolução de um empréstimo
def update_loan_return_date(id_emprestimo, data_devolucao):
    conn = connect()
    conn.execute("UPDATE emprestimos SET data_devolucao = ? WHERE id = ?", (data_devolucao, id_emprestimo))
    conn.commit()
    conn.close()


# Função para consultar livros por título
def search_books_by_title(titulo):
    conn = connect()
    result = conn.execute("SELECT * FROM livros WHERE titulo LIKE ?", ('%' + titulo + '%',)).fetchall()
    conn.close()
    return result


# Função para consultar livros por autor
def search_books_by_author(autor):
    conn = connect()
    result = conn.execute("SELECT * FROM livros WHERE autor LIKE ?", ('%' + autor + '%',)).fetchall()
    conn.close()
    return result


# Função para exibir mensagens de sucesso ou erro
def show_message(title, message):
    messagebox.showinfo(title, message)


# Função para inserir livro através da interface
def submit_book():
    title = entry_title.get()
    author = entry_author.get()
    publisher = entry_publisher.get()
    year = entry_year.get()
    isbn = entry_isbn.get()
    insert_book(title, author, publisher, year, isbn)
    show_message("Sucesso", "Livro inserido com sucesso!")


# Função para inserir usuário através da interface
def submit_user():
    first_name = entry_user_firstname.get()
    last_name = entry_user_lastname.get()
    address = entry_user_address.get()
    email = entry_user_email.get()
    phone = entry_user_phone.get()
    insert_user(first_name, last_name, address, email, phone)
    show_message("Sucesso", "Usuário inserido com sucesso!")


# Função para realizar um empréstimo através da interface
def submit_loan():
    user_id = entry_loan_user_id.get()
    book_id = entry_loan_book_id.get()
    loan_date = entry_loan_date.get()
    insert_loan(book_id, user_id, loan_date)
    show_message("Sucesso", "Empréstimo realizado com sucesso!")


# Função para devolver um livro
def submit_return():
    loan_id = entry_return_loan_id.get()
    return_date = entry_return_date.get()
    update_loan_return_date(loan_id, return_date)
    show_message("Sucesso", "Data de devolução atualizada com sucesso!")


# Função para consultar livros por título e exibir resultados
def submit_search_by_title():
    title = entry_search_title.get()
    books = search_books_by_title(title)
    display_results(books)


# Função para consultar livros por autor e exibir resultados
def submit_search_by_author():
    author = entry_search_author.get()
    books = search_books_by_author(author)
    display_results(books)


# Função para exibir resultados na interface
def display_results(books):
    for i in tree.get_children():
        tree.delete(i)
    for book in books:
        tree.insert("", "end", values=book)


# Função para criar a interface
def create_interface():
    global entry_title, entry_author, entry_publisher, entry_year, entry_isbn
    global entry_user_firstname, entry_user_lastname, entry_user_address, entry_user_email, entry_user_phone
    global entry_loan_user_id, entry_loan_book_id, entry_loan_date
    global entry_return_loan_id, entry_return_date
    global entry_search_title, entry_search_author, tree

    root = tk.Tk()
    root.title("Sistema de Biblioteca")

    # Frame para inserir livros
    frame_books = tk.Frame(root)
    frame_books.pack(pady=10)

    tk.Label(frame_books, text="Inserir Livro").grid(row=0, columnspan=2)
    tk.Label(frame_books, text="Título:").grid(row=1, column=0)
    entry_title = tk.Entry(frame_books)
    entry_title.grid(row=1, column=1)

    tk.Label(frame_books, text="Autor:").grid(row=2, column=0)
    entry_author = tk.Entry(frame_books)
    entry_author.grid(row=2, column=1)

    tk.Label(frame_books, text="Editora:").grid(row=3, column=0)
    entry_publisher = tk.Entry(frame_books)
    entry_publisher.grid(row=3, column=1)

    tk.Label(frame_books, text="Ano:").grid(row=4, column=0)
    entry_year = tk.Entry(frame_books)
    entry_year.grid(row=4, column=1)

    tk.Label(frame_books, text="ISBN:").grid(row=5, column=0)
    entry_isbn = tk.Entry(frame_books)
    entry_isbn.grid(row=5, column=1)

    tk.Button(frame_books, text="Adicionar Livro", command=submit_book).grid(row=6, columnspan=2)

    # Frame para inserir usuários
    frame_users = tk.Frame(root)
    frame_users.pack(pady=10)

    tk.Label(frame_users, text="Inserir Usuário").grid(row=0, columnspan=2)
    tk.Label(frame_users, text="Nome:").grid(row=1, column=0)
    entry_user_firstname = tk.Entry(frame_users)
    entry_user_firstname.grid(row=1, column=1)

    tk.Label(frame_users, text="Sobrenome:").grid(row=2, column=0)
    entry_user_lastname = tk.Entry(frame_users)
    entry_user_lastname.grid(row=2, column=1)

    tk.Label(frame_users, text="Endereço:").grid(row=3, column=0)
    entry_user_address = tk.Entry(frame_users)
    entry_user_address.grid(row=3, column=1)

    tk.Label(frame_users, text="E-mail:").grid(row=4, column=0)
    entry_user_email = tk.Entry(frame_users)
    entry_user_email.grid(row=4, column=1)

    tk.Label(frame_users, text="Telefone:").grid(row=5, column=0)
    entry_user_phone = tk.Entry(frame_users)
    entry_user_phone.grid(row=5, column=1)

    tk.Button(frame_users, text="Adicionar Usuário", command=submit_user).grid(row=6, columnspan=2)

    # Frame para empréstimos
    frame_loans = tk.Frame(root)
    frame_loans.pack(pady=10)

    tk.Label(frame_loans, text="Realizar Empréstimo").grid(row=0, columnspan=2)
    tk.Label(frame_loans, text="ID do Usuário:").grid(row=1, column=0)
    entry_loan_user_id = tk.Entry(frame_loans)
    entry_loan_user_id.grid(row=1, column=1)

    tk.Label(frame_loans, text="ID do Livro:").grid(row=2, column=0)
    entry_loan_book_id = tk.Entry(frame_loans)
    entry_loan_book_id.grid(row=2, column=1)

    tk.Label(frame_loans, text="Data de Empréstimo (AAAA-MM-DD):").grid(row=3, column=0)
    entry_loan_date = tk.Entry(frame_loans)
    entry_loan_date.grid(row=3, column=1)

    tk.Button(frame_loans, text="Registrar Empréstimo", command=submit_loan).grid(row=4, columnspan=2)

    # Frame para devoluções
    frame_returns = tk.Frame(root)
    frame_returns.pack(pady=10)

    tk.Label(frame_returns, text="Registrar Devolução").grid(row=0, columnspan=2)
    tk.Label(frame_returns, text="ID do Empréstimo:").grid(row=1, column=0)
    entry_return_loan_id = tk.Entry(frame_returns)
    entry_return_loan_id.grid(row=1, column=1)

    tk.Label(frame_returns, text="Data de Devolução (AAAA-MM-DD):").grid(row=2, column=0)
    entry_return_date = tk.Entry(frame_returns)
    entry_return_date.grid(row=2, column=1)

    tk.Button(frame_returns, text="Registrar Devolução", command=submit_return).grid(row=3, columnspan=2)

    # Frame para consultas
    frame_search = tk.Frame(root)
    frame_search.pack(pady=10)

    tk.Label(frame_search, text="Consultar Livro").grid(row=0, columnspan=2)

    tk.Label(frame_search, text="Título:").grid(row=1, column=0)
    entry_search_title = tk.Entry(frame_search)
    entry_search_title.grid(row=1, column=1)
    tk.Button(frame_search, text="Buscar por Título", command=submit_search_by_title).grid(row=2, columnspan=2)

    tk.Label(frame_search, text="Autor:").grid(row=3, column=0)
    entry_search_author = tk.Entry(frame_search)
    entry_search_author.grid(row=3, column=1)
    tk.Button(frame_search, text="Buscar por Autor", command=submit_search_by_author).grid(row=4, columnspan=2)

    # Frame para exibir resultados
    frame_results = tk.Frame(root)
    frame_results.pack(pady=10)

    tk.Label(frame_results, text="Resultados da Consulta").grid(row=0, columnspan=2)

    # Criar uma Treeview para mostrar os resultados
    tree = ttk.Treeview(frame_results, columns=("ID", "Título", "Autor", "Editora", "Ano", "ISBN"), show='headings')
    tree.heading("ID", text="ID")
    tree.heading("Título", text="Título")
    tree.heading("Autor", text="Autor")
    tree.heading("Editora", text="Editora")
    tree.heading("Ano", text="Ano")
    tree.heading("ISBN", text="ISBN")
    tree.grid(row=1, columnspan=2)

    create_tables()  # Criar tabelas ao iniciar
    root.mainloop()


# Executar a interface
create_interface()
